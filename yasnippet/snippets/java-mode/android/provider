# name: FILE *fp = fopen(..., ...);
# key: provider
# --

package ${1:package_name};

/*
append to AndroidManifest.xml
<provider
    android:name="$2"
    android:authorities="$3"
    android:exported="false" >
    <grant-uri-permission android:pathPattern=".*" />
</provider>
*/

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

public class ${2:`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`} extends ContentProvider {
    private static final String TAG = "$2";

    public static final String SCHEME = "content://";
    public static final String AUTHORITY = "${3:$1.${2:$(downcase text)}}";

    public static final String CONTENT_TYPE = "vnd.$4.cursor.dir/vnd.$4.Theme";
    public static final String CONTENT_ITEM_TYPE = "vnd.$4.cursor.item/vnd.$4.Theme";

    public static final String PATH_ID_${4:table} = "/$4/";
    public static final String PATH_$4 = "/$4";
    public static final Uri URI_ID_$4 = Uri.parse(SCHEME + AUTHORITY + PATH_ID_$4);
    public static final Uri URI_$4 =Uri.parse(SCHEME + AUTHORITY + PATH_$4);
    private static final int N_$4 = 0 * 2;
    private static final int N_ID_$4 = 0 * 2 + 1;


    private DatabaseHelper mDb;
    private static final UriMatcher sUriMatcher;

    static {
        sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
        sUriMatcher.addURI(AUTHORITY, "$4", N_$4);
        sUriMatcher.addURI(AUTHORITY, "$4/#", N_ID_$4);
	$0
    }
    
    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        SQLiteDatabase db = mDb.getWritableDatabase();
        String where;
        int count = 0;

        switch(sUriMatcher.match(uri)) {
        case N_$4:
            count = db.delete(Contract.TABLE_$4, selection, selectionArgs);
        break;
        case N_ID_$4:
            where = Contract._ID + " = " + uri.getPathSegments().get(1);
            if (where != null) {
                where += " AND " + selection;
            }
            count = db.delete(Contract.TABLE_$4, where, selectionArgs);
        break;

        default:
           throw new IllegalArgumentException("Unknown URI " + uri);
        }

        getContext().getContentResolver().notifyChange(uri, null);
        return count;
    }

    @Override
    public String getType(Uri uri) {
        switch(sUriMatcher.match(uri)) {
        case N_$4:
            return CONTENT_TYPE;

        case N_ID_$4:
            return CONTENT_ITEM_TYPE;

        default:
            throw new IllegalArgumentException("Unknown URI " + uri);
        }
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        SQLiteDatabase db = mDb.getWritableDatabase();
        long rowId;
        Uri iuri;
		
        switch(sUriMatcher.match(uri)) {
        case N_$4:
            rowId = db.insert(Contract.TABLE_$4, Contract._ID, values);
            iuri = ContentUris.withAppendedId(URI_ID_$4, rowId);
        break;

        default:
            throw new IllegalArgumentException("Unknown URI " + uri);
        }
		
        if (rowId > 0) {
            getContext().getContentResolver().notifyChange(iuri, null);
            return iuri;
        }
		
        throw new SQLException("Failed to insert row into " + uri);
    }

    @Override
    public boolean onCreate() {
        Log.d(TAG, "=====> onCreate, " + getContext());
        mDb = new DatabaseHelper(getContext());
        return true;
    }
 
    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
			String[] selectionArgs, String sortOrder) {
        SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
		
	switch(sUriMatcher.match(uri)) {
            case N_$4:
            case N_ID_$4:
                qb.setTables(Contract.TABLE_$4);
            break;

            default:
                throw new IllegalArgumentException("Unknown URI " + uri);
        }
		
        SQLiteDatabase db = mDb.getReadableDatabase();
        Cursor c = qb.query(db, projection, selection, selectionArgs, null, null, sortOrder);
        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection,
			String[] selectionArgs) {
        SQLiteDatabase db = mDb.getWritableDatabase();
        int count = 0;
        String where;
		
        switch(sUriMatcher.match(uri)) {
        case N_$4:
            count = db.update(Contract.TABLE_$4, values, selection, selectionArgs);
        break;

        case N_ID_$4: {
            String tid = uri.getPathSegments().get(1);
            where = Contract._ID + " = " + tid;
            if (selection != null) {
                where += " AND " + selection;
            }
            count = db.update(Contract.TABLE_$4, values, where, selectionArgs);
        }
        break;

        default:
            throw new IllegalArgumentException("Unknown URI " + uri);
        }
		
        getContext().getContentResolver().notifyChange(uri, null);
        return count;
    }
	
	public static class Contract implements BaseColumns {
		public final static String DB_NAME = "Theme.db";
		public final static int DB_VERSION = 3;

               public final static String TABLE_$4 = "$4";
               public final static String COLUMN_$4_id = "id";
               public final static String COLUMN_$4_package_name = "package_name";
               public final static String COLUMN_$4_target_package_name = "target_package_name";
               public final static String COLUMN_$4_res_dir = "res_dir";
               public final static String COLUMN_$4_target_res_dir = "target_res_dir";
               public final static String COLUMN_$4_preview_res_id = "preview_res_id";
               public final static String COLUMN_$4_name_res_id = "name_res_id";
               public final static String COLUMN_$4_applied = "applied";

	}
	
        private static class DatabaseHelper extends SQLiteOpenHelper {
            DatabaseHelper(Context context) {
                super(context, Contract.DB_NAME, null, Contract.DB_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {

            db.execSQL("CREATE TABLE " + Contract.TABLE_$4 + " ("  
                + Contract.COLUMN_$4_id + " INTEGER NOT NULL,"
                + Contract.COLUMN_$4_package_name + " TEXT,"
                + Contract.COLUMN_$4_target_package_name + " TEXT,"
                + Contract.COLUMN_$4_res_dir + " TEXT,"
                + Contract.COLUMN_$4_target_res_dir + " TEXT,"
                + Contract.COLUMN_$4_preview_res_id + " INTEGER,"
                + Contract.COLUMN_$4_name_res_id + " TEXT,"
                + Contract.COLUMN_$4_applied + " BOOLEAN,"
                + Contract._ID + " INTEGER PRIMARY KEY);");
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL("DROP TABLE IF EXISTS " + Contract.TABLE_$4);
            onCreate(db);
        }
    }
}
