(defun droid()
  (interactive)
  (let ((command (ido-completing-read "command: " '("make" "push" "log" "reboot"))))
    (cond 
     ((string= command "make") (call-interactively 'droid-make))
     ((string= command "push") (call-interactively 'droid-push))
     ((string= command "log") (call-interactively 'droid-log))
     ((string= command "reboot") (call-interactively 'droid-reboot))
     )
    )
  )

(defun droid-log ()
  (interactive)
  (let ((orig-command compile-command))
    (when (get-buffer "*droid-log*")
      (switch-to-buffer "*droid-log*")
      (return))
    (setq command "droid log")
    (with-current-buffer (compilation-start command nil)
      (rename-buffer "*droid-log*")
      )
    (switch-to-buffer-other-window "*droid-log*")
    (delete-other-windows)
    (setq compile-command orig-command)
    )
  )

(defun droid-reboot()
  (interactive)
  (start-process "droid-reboot" nil "droid" "reboot")
  )

(defun droid-push ()
  (interactive)
  (let ((orig-command compile-command))
    (if (get-buffer "*droid-push*")
	(kill-buffer "*droid-push*")
      )

    (setq args (read-from-minibuffer
		(format (concat "droid push "))
		"default" nil nil nil))
    (setq command (concat "droid push " args))
    (with-current-buffer (compilation-start command nil)
      (rename-buffer "*droid-push*")
      )
    (switch-to-buffer-other-window "*droid-push*")
    (delete-other-windows)
    (setq compile-command orig-command)
    )
  )

(defun droid-make ()
  (interactive)
  (let ((orig-command compile-command))
    (if (get-buffer "*compilation*")
	(kill-buffer "*compilation*")
      )

    (setq args (read-from-minibuffer
		(format (concat "droid make "))
		"default" nil nil nil))
    (setq command (concat "droid make " args))
    (with-current-buffer (compilation-start command nil)
      (rename-buffer "*compilation*")
      )
    (switch-to-buffer-other-window "*compilation*")
    (delete-other-windows)
    (setq compile-command orig-command)
    )
  )
