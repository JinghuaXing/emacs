#+TITLE: Singleton
#+AUTHOR: Wei Sun (孙伟)
#+EMAIL: wei.sun@spreadtrum.com
* Singleton
Singleton (单例) 模式有两个特性:

1. single instance
   - 为了性能 ?
   - 为了功能 ?
2. global access

在 java 中,  singleton 有多少不同的写法:
** Eager initialization
#+BEGIN_SRC java
  Classs Singleton {
      private static Singleton sInstance=new Singleton();
      private Singleton() {
          
      }
  
      public static Singleton getInstance() {
          return sInstance;
      }
  }
#+END_SRC

** Lazy initialization
#+BEGIN_SRC java
  class Singleton {
      private static Singleton sInstance;
      private Singleton() {
  
      }
  
      synchronized public static Singleton getInstance() {
          if (sInstance==null) {
              sInstance=new Singleton();
          }
          return sInstance;
      }
  }
#+END_SRC
** Lazy initialization with double-checked locking
#+BEGIN_SRC java
  class Singleton {
      private static volatile Singleton sInstance;
      private Singleton() {
      }
    
      public static Singleton getInstance() {
          if (sInstance==null) {
              synchronized (this) {
                  if (sInstance==null) {
                      sInstance=new Singleton();
                  } 
              }
          }
          return sInstance;
      }
  }
#+END_SRC

需要注意的是, 在 JDK5 之前, 上述代码无法正常工作:
http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html

** Holder
#+BEGIN_SRC java
  class Singleton {
      private static class Holder {
          public static Singleton sInstance=new Singleton();
      }
      private Singleton() {
      
      }
      
      public static Singleton getInstance() {
          return Holder.sInstance;
      }
  }
#+END_SRC

** enum
略

** 总结
以上写法各有利弊, 有时考虑到程序启动时的性能, 会考虑 lazy
initialization, 有些考虑到程序运行时的性能, 会考虑 eager
initialization.

如果不太清楚到底要用哪种, 那还是用 lazy 的版本吧: 曾经有一个因为
Android TelephonyManager 使用 eager singleton 导致的 bug.

* Singleton 与全局变量
可变的(mutable)全局变量应该避免使用, 主要原因是: 

1. 它们可能被任意的改写而程序的任意代码都可能会使用它.
2. 可变的全局变量需要加锁

Singleton 的 global access 属性决定了它实际上就是一种全局变量, 如果不能
保证 singleton 是不可变的 (immutable), 那么尽量为了 single instance 去
使用 singleton, 避免为了 global access 去使用 singleton.
