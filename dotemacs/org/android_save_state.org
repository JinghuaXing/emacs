* Android Save State howto
** Activity.onSaveInstanceState
When system thinks that an activity need to be `saved` before destroying it,
`onSaveInstanceState` will be invoked. But, when should the activity be
`saved`?  It depends ... but in one word, if the activity may be destroyed
without the users notification, it's state will be `saved`, e.g.:
- orientation change
- background activity is killed to reserve resource
- ...

Activity's `instance state` mainly matters 3 aspects:
1. view hierarchy
2. managed dialog
3. fragments

Note that: there is another kind of `instance state`: NonConfigurationInstances
state, these states are maintained by `onRetainNonConfigurationInstance` and
only matters about configurationChange

#+BEGIN_SRC fundamental
  ActivityThread.performStopActivity
    mInstrumentation.callActivityOnSaveInstanceState(r.activity, state);
      activity.performSaveInstanceState(outState);
        onSaveInstanceState(outState);
        saveManagedDialogs(outState);
  
  Activity.onSaveInstanceState(outState);
    // 1. save view hierarchy
    outState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());
    // 2. save fragment
    outState.putParcelable(FRAGMENTS_TAG, mFragments.saveAllState(););
  
  // View hierarchy is made up of 4 elements:
  // 1. view hierarchy
  // 2. focused view
  // 3. panels
  // 4. action bar
  PhoneWindow.saveHierarchyState()
    SparseArray<Parcelable> states = new SparseArray<Parcelable>();
    // the view root
    mContentParent.saveHierarchyState(states);
      View.dispatchSaveInstanceState(container);
        if (mID != NO_ID && (mViewFlags & SAVE_DISABLED_MASK) == 0):
          Parcelable state = onSaveInstanceState();
          container.put(mID, state);
    outState.putSparseParcelableArray(VIEWS_TAG, states);
    // save the focused view id
    View focusedView = mContentParent.findFocus();
    outState.putInt(FOCUSED_ID_TAG, focusedView.getId());
    // save the panels state
    ...
    // save action bar state
#+END_SRC
** To summarizes
1. When Activity.onSaveInstanceState is invoked? It depends ...
2. What is saved during Activity.onSaveInstanceState:
   - managed dialog
   - fragments state
   - view hierarchy
3. when saving view hierarchy, `only a few` views have implemented the
   `onSaveInstanceState`, e.g:

   - TextView
     to save the text
   - Spinner
   - ListView
   - ProgressBar
   - ...

   Note that: LayoutParams is never saved by default.
     
4. The view hierarchy will not be saved properly if two views share the save
   `mID`, because `container.put(mID, state);`, this problem is especially
   important for ViewGroup like ListView (ListView items always have items with
   the same mID), so these ViewGroup must override the
   `dispatchSaveInstanceState` method.
5. view with mID==NO_ID, or with view flag: SAVE_DISABLED_MASK will not be saved
   
   
