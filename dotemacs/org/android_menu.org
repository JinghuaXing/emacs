* Android Menu
** Options Menu
*** Overflow Menu
#+BEGIN_SRC 
: java.lang.Throwable: stack dump
:	at java.lang.Thread.dumpStack(Thread.java:496)
:	at com.android.internal.view.menu.ActionMenuPresenter.showOverflowMenu(ActionMenuPresenter.java:281)
:	at com.android.internal.widget.AbsActionBarView.showOverflowMenu(AbsActionBarView.java:177)
:	at com.android.internal.policy.impl.PhoneWindow.onKeyUpPanel(PhoneWindow.java:789)
:	at com.android.internal.policy.impl.PhoneWindow.onKeyUp(PhoneWindow.java:1488)
:	at com.android.internal.policy.impl.PhoneWindow$DecorView.dispatchKeyEvent(PhoneWindow.java:1815)
:	at android.view.ViewRootImpl.deliverKeyEventPostIme(ViewRootImpl.java:3330)
:	at android.view.ViewRootImpl.handleFinishedEvent(ViewRootImpl.java:3303)
:	at android.view.ViewRootImpl.handleMessage(ViewRootImpl.java:2463)
:	at android.os.Handler.dispatchMessage(Handler.java:99)
:	at android.os.Looper.loop(Looper.java:137)
:	at android.app.ActivityThread.main(ActivityThread.java:4496)
:	at java.lang.reflect.Method.invokeNative(Native Method)
:	at java.lang.reflect.Method.invoke(Method.java:511)
:	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:797)
:	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:564)
:	at dalvik.system.NativeStart.main(Native Method)
----
: java.lang.Throwable: stack dump
:	at java.lang.Thread.dumpStack(Thread.java:496)
:	at com.android.contacts.activities.PeopleActivity.onPrepareOptionsMenu(PeopleActivity.java:1411)
:	at android.app.Activity.onPreparePanel(Activity.java:2467)
:	at com.android.internal.policy.impl.PhoneWindow.reopenMenu(PhoneWindow.java:968)
:	at com.android.internal.policy.impl.PhoneWindow.onMenuModeChange(PhoneWindow.java:959)
:	at com.android.internal.view.menu.MenuBuilder.changeMenuMode(MenuBuilder.java:743)
:	at com.android.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable.run(ActionMenuPresenter.java:659)
:	at android.os.Handler.handleCallback(Handler.java:605)
:	at android.os.Handler.dispatchMessage(Handler.java:92)
:	at android.os.Looper.loop(Looper.java:137)
:	at android.app.ActivityThread.main(ActivityThread.java:4496)
:	at java.lang.reflect.Method.invokeNative(Native Method)
:	at java.lang.reflect.Method.invoke(Method.java:511)
:	at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:797)
:	at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:564)
:	at dalvik.system.NativeStart.main(Native Method)
#+END_SRC
*** Panel
**** Activity Start up
#+BEGIN_SRC text
  Activity.setContentView
    PhoneWindow.installDecor()
      ...
      mDecor.post(new Runnable() {
              public void run() {
                  // Invalidate if the panel menu hasn't been created before this.
                  // PanelFeatureState st = getPanelState(FEATURE_OPTIONS_PANEL, false);
                  invalidatePanelMenu(FEATURE_ACTION_BAR);
              }
      });
#+END_SRC

#+BEGIN_SRC text
  PhoneWindow.invalidatePanelMenu(featureId)
    PanelFeatureState st = getPanelState(featureId,true)
    st.refreshMenuContent = true;
    st.refreshDecorView = true;
    if (hasActionBar):
      preparePanel(st)
        if st.isPrepared:
          // st.isPrepared is be set to false when: invalidatePanelMenu, closePanel
          return true;
        st.createdPanelView = cb.onCreatePanelView(featureId)
        if st.createdPanelView!=null:
          // a user-defined view is returned, use it
          return;
        // st.createdPanelView is null, create the menu used by the menu view
        // 1.CREATE!
        if st.refreshMenuContent:
          // menu is invalidated,  that is, `invalidateOptionsMenu` will cause
          // `onCreateOptionsMenu` be invoked again, or else, when preparePanel
          // onCreateOptionsMenu is not invoked for optimization.
          initializePanelMenu()
            menu = new MenuBuilder()
            st.setMenu(menu)
          mActionBar.setMenu(st.menu)
          cb.onCreatePanelMenu(st.menu)
            Activity.onCreateOptionsMenu(menu) // GOT YA
          st.refreshMenuContent = false;
        // if st.refreshMenuContent ends here
        // 2.PREPARE!
        cb.onPreparePanel(st.menu)
          Activity.onPrepareOptionsMenu(menu)
        // now `menu` is prepared, but `view` is still not ready:
        // `openPanel` will do the work later
#+END_SRC

that is: `onCreateOptionsMenu` is invoked during `setContentView`
***** To summaries
during Activity `setContentView`:
- invalidateOptionsMenu
- st.refreshMenuContent & st.refreshDecorView
- preparePanel

- if there is no action bar
  both of the panel view and the panel menu need not be initialized, because
  they could be postponed until user pressed the MENU key. so, only some flags
  are set for later use, e.g. st.refreshMenuContent, st.refreshDecorView ...,
  later when MENU key is pressed, `openPanel` will notice these flags, and
  `prepare` 

- if there is action bar
  in addition of setting those flags, the menu is also `prepared`, because
  action bar need to show some menu even when MENU key is not pressed though.
   
**** On Key
***** onKeyDown
#+BEGIN_SRC text
  PhoneWindow.onKeyDownPanel
    preparePanel()
#+END_SRC

that is, just when `onKeyDown`, the panel is `prepared`, `onCreateOptionsMenu`
and `onPrepareOptionsMenu` is invoked accordingly.

***** onKeyUp
#+BEGIN_SRC text
  PhoneWindow.onKeyUp()
    PhoneWindow.onKeyUpPanel()
      openPanel()
        if !cb.onMenuOpened():
          closePanel()
          return
        if st.decorView == null || st.refreshDecorView:
          // 1. populate decor
          // panel is opened for the 1st time, or menu is invalidated
          if st.decorView == null:
            initializePanelDecor()
              st.decorView = new DecorView(getContext(), st.featureId);
              // menu is shown as `CENTER|BOTTOM`       
              st.gravity = Gravity.CENTER | Gravity.BOTTOM;
          else if st.refreshDecorView
            st.decorView.removeAllViews()
          // 2. populate shownPanelView (the listview)
          initializePanelContent()
            if st.createdPanelView != null:
              // activity has set the st.createdPanelView through onCreatePanelView
              // thus override the list view.
              st.shownPanelView=st.createdPanelView
              return true;
            else:
              // inflate a list view through MenuPresenter
        // decorView and shownPanelView is ready
        WindowManager.LayoutParams lp = new WindowManager.LayoutParams(...,WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG,...)
        lp.gravity = st.gravity; // Gravity.CENTER | Gravity.BOTTOM;
        wm.addView(st.decorView, lp);
#+END_SRC

**** To summaries:
***** Activity Callback
Activity has several callbacks to interact with PopupWindow for menu:
1. onCreatePanelMenu && onCreateOptionsMenu
2. onPreparePanel && onPrepareOptionsMenu
3. *onCreatePanelView*
4. onMenuOpened
5. ...

***** preparePanel && openPanel
- preparePanel for the menu DATA
  - createOptionsMenu
  - prepareOptionsMenu
- openPanel for the menu VIEW
- any time when MENU key is pressed, menu is `prepared`: `prepareOptionsMenu` and
  if invalidated, `createOptionsMenu`
- if there is action bar, menu is `prepared` on activity start up.
** Context Menu
#+BEGIN_SRC text
  View.performLongClick()
    if mOnLongClickListener.onLongClick(view.this):
      return;
    showContextMenu()
      getParent().showContextMenuForChild(this);
        // > ListView
        if mOnItemLongClickListener.onItemLongClick(AbsListView.this, originalView,...):
          return;
        super.showContextMenuForChild(originalView)
        // > ViewGroup
        mParent.showContextMenuForChild(originalView);
          // DecorView
          PhoneWindow.showContextMenuForChild(originalView)
            new ContextMenuBuilder(getContext()).show(originalView);
              // I. prepare the menu
              originalView.createContextMenu(this);
                // 1. View can override `onCreateContextMenu` to add addition menu items
                View.onCreateContextMenu(menu);
                // 2. call activity.onCreateContextMenu()
                mOnCreateContextMenuListener.onCreateContextMenu(menu, this, menuInfo);
                // 3. call parent's createContextMenu
                mParent.createContextMenu(menu);
              // II. show it
              new MenuDialogHelper(menu).show();
                // show an AlertDialog
                AlertDialog.Builder builder = new AlertDialog.Builder(menu.getContext());
                mPresenter = new ListMenuPresenter(builder.getContext(), com.android.internal.R.layout.list_menu_item_layout);
                mMenu.addMenuPresenter(mPresenter);
                builder.setAdapter(mPresenter.getAdapter(), this);
                mDialog = builder.create();
                mDialog.show();
#+END_SRC
